/** [LPE]  Version: 1.0.0 - 2019/02/15 15:01:54 */ 
 (function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["lpe"] = factory();
	else
		root["lpe"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony default export */ __webpack_exports__[\"a\"] = (console);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29uc29sZS9jb25zb2xlLmpzPzE5YjYiXSwibmFtZXMiOlsiY29uc29sZSJdLCJtYXBwaW5ncyI6IkFBQ0EseURBQWVBLE9BQWYiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY29uc29sZTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29uc29sZS9jb25zb2xlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export init_lisp */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = eval_lisp;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = evaluate;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__console_console__ = __webpack_require__(0);\nfunction _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest(); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n *  miniMAL lisp interpreter\n *  Copyright (C) 2014 Joel Martin\n *  Licensed under MPL 2.0\n *  https://github.com/kanaka/mal\n * \n */\n\n/**\n *  The code has been reworked to suite LuxmsBI needs\n *  by esix & Dmitry Dorofeev\n *  2017-2019\n */\n\n\nvar isArray = function isArray(arg) {\n  return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\nvar isString = function isString(arg) {\n  return typeof arg === 'string';\n};\n\nvar isNumber = function isNumber(arg) {\n  return typeof arg === 'number';\n};\n\nvar isHash = function isHash(arg) {\n  return _typeof(arg) === 'object' && arg !== null && !isArray(arg);\n};\n\nvar isFunction = function isFunction(arg) {\n  return typeof arg === 'function';\n};\n/**\n * Get or Set variable in context\n * @param {*} ctx - array, hashmap or function that stores variables \n * @param {*} varName - the name of variable\n * @param {*} value - optional value to set (undefied if get)\n */\n\n\nfunction $var$(ctx, varName, value) {\n  if (isArray(ctx)) {\n    // contexts chain\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = ctx[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var theCtx = _step.value;\n        var result = $var$(theCtx, varName);\n        if (result === undefined) continue; // no such var in context\n\n        if (value === undefined) return result; // get => we've got a result\n\n        return $var$(theCtx, varName, value); // set => redirect 'set' to context with variable.\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (value === undefined) return undefined; // get => variable not found in all contexts\n\n    if (ctx.length) $var$(ctx[0], varName, value); // set => set variable to HEAD context\n\n    return undefined; // ??? ctx.length = 0\n  }\n\n  if (isFunction(ctx)) return ctx(varName, value);\n\n  if (isHash(ctx)) {\n    return value === undefined ? ctx[varName] : ctx[varName] = value;\n  }\n\n  return undefined;\n}\n\nfunction makeMacro(fn, ast) {\n  fn.ast = ast || [[], {}, [], 1]; // mark as macro\n\n  return fn;\n}\n\nfunction aListToHashTable(alist) {\n  var result = {};\n  alist.forEach(function (pair) {\n    return result[pair[0]] = pair[1];\n  });\n  return result;\n}\n\nfunction makeLetBindings(bindings) {\n  if (isHash(bindings)) return _objectSpread({}, bindings);\n  if (isArray(bindings)) return aListToHashTable(bindings);\n  if (isFunction(bindings)) return bindings;\n  throw new Error('LISP: let expression invalid form in ' + ast);\n}\n\nvar SPECIAL_FORMS = {\n  // built-in special forms\n  'let': function _let(ast, ctx, rs) {\n    return EVAL(['begin'].concat(_toConsumableArray(ast.slice(1))), [makeLetBindings(ast[0]), ctx], rs);\n  },\n  '`': function _(ast, ctx) {\n    return ast[0];\n  },\n  // quote\n  'macroexpand': macroexpand,\n  'begin': function begin(ast, ctx) {\n    return ast.reduce(function (acc, astItem) {\n      return EVAL(astItem, ctx);\n    }, null);\n  },\n  'do': function _do(ast, ctx) {\n    throw new Error('DO not implemented');\n  },\n  'if': function _if(ast, ctx, rs) {\n    return EVAL(ast[0], ctx, false) ? EVAL(ast[1], ctx, rs) : EVAL(ast[2], ctx, rs);\n  },\n  '~': function _(ast, ctx, rs) {\n    // mark as macro\n    var f = EVAL(ast[0], ctx, rs); // eval regular function\n\n    f.ast.push(1); // mark as macro\n\n    return f;\n  },\n  '.-': function _(ast, ctx, rs) {\n    // get or set attribute\n    var _eval_ast = eval_ast(ast, ctx, rs),\n        _eval_ast2 = _slicedToArray(_eval_ast, 3),\n        obj = _eval_ast2[0],\n        propertyName = _eval_ast2[1],\n        value = _eval_ast2[2];\n\n    return value !== undefined ? obj[propertyName] = value : obj[propertyName];\n  },\n  '.': function _(ast, ctx, rs) {\n    // call object method\n    var _eval_ast3 = eval_ast(ast, ctx, rs),\n        _eval_ast4 = _toArray(_eval_ast3),\n        obj = _eval_ast4[0],\n        methodName = _eval_ast4[1],\n        args = _eval_ast4.slice(2);\n\n    var fn = obj[methodName];\n    return fn.apply(obj, args);\n  },\n  'try': function _try(ast, ctx, rs) {\n    // try/catch\n    try {\n      return EVAL(ast[0], ctx, rs);\n    } catch (e) {\n      var errCtx = env_bind([ast[1][0]], ctx, [e]);\n      return EVAL(ast[1][1], errCtx, rs);\n    }\n  },\n  '||': function _(ast, ctx, rs) {\n    return ast.some(function (a) {\n      return !!EVAL(a, ctx, rs);\n    });\n  },\n  // logical or\n  '&&': function _(ast, ctx, rs) {\n    return ast.every(function (a) {\n      return !!EVAL(a, ctx, rs);\n    });\n  },\n  // logical and\n  'fn': function fn(ast, ctx, rs) {\n    // define new function (lambda)\n    var f = function f() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return EVAL(ast[1], env_bind(ast[0], ctx, args), rs);\n    };\n\n    f.ast = [ast[1], ctx, ast[0]]; // f.ast compresses more than f.data\n\n    return f;\n  },\n  'def': function def(ast, ctx, rs) {\n    // update current environment\n    var value = EVAL(ast[1], ctx, rs);\n    var result = $var$(ctx, ast[0], value);\n    return result;\n  }\n};\nvar STDLIB = {\n  // built-in constants\n  '#t': true,\n  '#f': false,\n  'NIL': null,\n  'null': null,\n  // js specific\n  'true': true,\n  'false': false,\n  // built-in function\n  '=': function _() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return args.every(function (v) {\n      return v === args[0];\n    });\n  },\n  '+': function _() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return args.reduce(function (a, b) {\n      return a + b;\n    });\n  },\n  '-': function _() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return args.length === 1 ? -args[0] : args.reduce(function (a, b) {\n      return a - b;\n    });\n  },\n  '*': function _() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    return args.reduce(function (a, b) {\n      return a * b;\n    });\n  },\n  '/': function _() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n\n    return args.length === 1 ? 1 / args[0] : args.reduce(function (a, b) {\n      return a / b;\n    });\n  },\n  '<': function _() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n\n    return args.every(function (v, i) {\n      return i === 0 ? true : args[i - 1] < args[i];\n    });\n  },\n  'isa': function isa(a, b) {\n    return a instanceof b;\n  },\n  'type': function type(a) {\n    return _typeof(a);\n  },\n  'new': function _new() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    return new (args[0].bind.apply(args[0], args))();\n  },\n  'del': function del(a, b) {\n    return delete a[b];\n  },\n  'list': function list() {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    return args;\n  },\n  'vector': function vector() {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n\n    return args;\n  },\n  '[': function _() {\n    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      args[_key11] = arguments[_key11];\n    }\n\n    return args;\n  },\n  'map': function map(a, b) {\n    return b.map(a);\n  },\n  'throw': function _throw(a) {\n    throw a;\n  },\n  'identity': function identity(a) {\n    return a;\n  },\n  'pluck': function pluck(c, k) {\n    return c.map(function (el) {\n      return el[k];\n    });\n  },\n  // for each array element, get property value, present result as array.\n  'RegExp': function (_RegExp) {\n    function RegExp() {\n      return _RegExp.apply(this, arguments);\n    }\n\n    RegExp.toString = function () {\n      return _RegExp.toString();\n    };\n\n    return RegExp;\n  }(function () {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n\n    return RegExp.apply(RegExp, args);\n  }),\n  'read-string': function readString(a) {\n    return JSON.parse(a);\n  },\n  'rep': function rep(a) {\n    return JSON.stringify(EVAL(JSON.parse(a), STDLIB));\n  },\n  // TODO: fix ctx and rs arguments\n  // not implemented yet\n  // 'hash-table->alist'\n  // macros\n  '\\'': makeMacro(function (a) {\n    return a.toString();\n  }),\n  '\"': makeMacro(function (a) {\n    return a.toString();\n  }),\n  '()': makeMacro(function () {\n    for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      args[_key13] = arguments[_key13];\n    }\n\n    return args;\n  }),\n  // ???\n  '->': makeMacro(function (acc) {\n    for (var _len14 = arguments.length, ast = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n      ast[_key14 - 1] = arguments[_key14];\n    }\n\n    // thread first macro\n    // императивная лапша для макроса ->\n    // надо вот так: https://clojuredocs.org/clojure.core/-%3E%3E\n    for (var _i2 = 0; _i2 < ast.length; _i2++) {\n      var arr = ast[_i2];\n\n      if (!isArray(arr)) {\n        arr = [\".-\", acc, arr]; // это может быть обращение к хэшу или массиву через индекс или ключ....\n      } else if (arr[0] === \"()\" && arr.length === 2 && (isString(arr[1]) || isNumber(arr[1]))) {\n        arr = [\".-\", acc, arr[1]];\n      } else {\n        arr.splice(1, 0, acc); // подставляем \"вычисленное\" ранее значение в качестве первого аргумента... классика thread first\n      }\n\n      acc = arr;\n    }\n\n    return acc;\n  }),\n  '->>': makeMacro(function (acc) {\n    for (var _len15 = arguments.length, ast = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n      ast[_key15 - 1] = arguments[_key15];\n    }\n\n    // thread last macro\n    // императивная лапша для макроса ->>\n    // надо вот так: https://clojuredocs.org/clojure.core/-%3E%3E\n    for (var _i3 = 0; _i3 < ast.length; _i3++) {\n      var arr = ast[_i3];\n      arr.push(acc);\n      acc = arr;\n    }\n\n    return acc;\n  }),\n  'invoke': makeMacro(function () {\n    for (var _len16 = arguments.length, ast = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n      ast[_key16] = arguments[_key16];\n    }\n\n    /// мы не можем использовать точку в LPE для вызова метода объекта, так как она уже замаплена на ->\n    /// поэтому для фанатов ООП пришлось добавить макрос invoke - вызов метода по его текстовому названию.\n    /// invoke хорошо стыкуется с ->\n    ast.splice(0, 0, \".\");\n    return ast;\n  }),\n  // system functions & objects\n  // 'js': eval,\n  eval_context: eval_context,\n  // TODO: remove\n  JSON: JSON,\n  console: __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */],\n  eval: function _eval(a) {\n    return EVAL(a, STDLIB);\n  }\n};\nvar minimal = [\"begin\", // этот new ждёт на вход функцию a - создать regExp из строчки \"RegExp\" не выйдет\n[\"def\", \"new\", [\"fn\", [\"a\", \"&\", \"b\"], [\".\", \"Reflect\", [\"`\", \"construct\"], \"a\", \"b\"]]], [\"def\", \"del\", [\"fn\", [\"a\", \"b\"], [\".\", \"Reflect\", [\"`\", \"deleteProperty\"], \"a\", \"b\"]]], [\"def\", \"map\", [\"fn\", [\"a\", \"b\"], [\".\", \"b\", [\"`\", \"map\"], [\"fn\", [\"x\"], [\"a\", \"x\"]]]]], [\"def\", \"list\", [\"fn\", [\"&\", \"a\"], \"a\"]], [\"def\", \">=\", [\"fn\", [\"a\", \"b\"], [\"if\", [\"<\", \"a\", \"b\"], false, true]]], [\"def\", \">\", [\"fn\", [\"a\", \"b\"], [\"if\", [\">=\", \"a\", \"b\"], [\"if\", [\"=\", \"a\", \"b\"], false, true], false]]], [\"def\", \"<=\", [\"fn\", [\"a\", \"b\"], [\"if\", [\">\", \"a\", \"b\"], false, true]]], [\"def\", \"classOf\", [\"fn\", [\"a\"], [\".\", [\".-\", [\".-\", \"Object\", [\"`\", \"prototype\"]], [\"`\", \"toString\"]], [\"`\", \"call\"], \"a\"]]], [\"def\", \"not\", [\"fn\", [\"a\"], [\"if\", \"a\", false, true]]], [\"def\", \"null?\", [\"fn\", [\"a\"], [\"=\", null, \"a\"]]], [\"def\", \"true?\", [\"fn\", [\"a\"], [\"=\", true, \"a\"]]], [\"def\", \"false?\", [\"fn\", [\"a\"], [\"=\", false, \"a\"]]], [\"def\", \"string?\", [\"fn\", [\"a\"], [\"if\", [\"=\", \"a\", null], false, [\"=\", [\"`\", \"String\"], [\".-\", [\".-\", \"a\", [\"`\", \"constructor\"]], [\"`\", \"name\"]]]]]], [\"def\", \"pr-str\", [\"fn\", [\"&\", \"a\"], [\".\", [\"map\", [\".-\", \"JSON\", [\"`\", \"stringify\"]], \"a\"], [\"`\", \"join\"], [\"`\", \" \"]]]], [\"def\", \"str\", [\"fn\", [\"&\", \"a\"], [\".\", [\"map\", [\"fn\", [\"x\"], [\"if\", [\"string?\", \"x\"], \"x\", [\".\", \"JSON\", [\"`\", \"stringify\"], \"x\"]]], \"a\"], [\"`\", \"join\"], [\"`\", \"\"]]]], [\"def\", \"prn\", [\"fn\", [\"&\", \"a\"], [\"begin\", [\".\", \"console\", [\"`\", \"log\"], [\".\", [\"map\", [\".-\", \"JSON\", [\"`\", \"stringify\"]], \"a\"], [\"`\", \"join\"], [\"`\", \" \"]]], null]]], [\"def\", \"println\", [\"fn\", [\"&\", \"a\"], [\"begin\", [\".\", \"console\", [\"`\", \"log\"], [\".\", [\"map\", [\"fn\", [\"x\"], [\"if\", [\"string?\", \"x\"], \"x\", [\".\", \"JSON\", [\"`\", \"stringify\"], \"x\"]]], \"a\"], [\"`\", \"join\"], [\"`\", \" \"]]], null]]], [\"def\", \"list?\", [\"fn\", [\"a\"], [\".\", \"Array\", [\"`\", \"isArray\"], \"a\"]]], [\"def\", \"contains?\", [\"fn\", [\"a\", \"b\"], [\".\", \"a\", [\"`\", \"hasOwnProperty\"], \"b\"]]], [\"def\", \"get\", [\"fn\", [\"a\", \"b\"], [\"if\", [\"contains?\", \"a\", \"b\"], [\".-\", \"a\", \"b\"], null]]], [\"def\", \"set\", [\"fn\", [\"a\", \"b\", \"c\"], [\"begin\", [\".-\", \"a\", \"b\", \"c\"], \"a\"]]], [\"def\", \"keys\", [\"fn\", [\"a\"], [\".\", \"Object\", [\"`\", \"keys\"], \"a\"]]], [\"def\", \"vals\", [\"fn\", [\"a\"], [\".\", \"Object\", [\"`\", \"values\"], \"a\"]]], [\"def\", \"cons\", [\"fn\", [\"a\", \"b\"], [\".\", [\"`\", []], [\"`\", \"concat\"], [\"list\", \"a\"], \"b\"]]], [\"def\", \"concat\", [\"fn\", [\"&\", \"a\"], [\".\", [\".-\", [\"list\"], [\"`\", \"concat\"]], [\"`\", \"apply\"], [\"list\"], \"a\"]]], [\"def\", \"nth\", \"get\"], [\"def\", \"first\", [\"fn\", [\"a\"], [\"if\", [\">\", [\".-\", \"a\", [\"`\", \"length\"]], 0], [\"nth\", \"a\", 0], null]]], [\"def\", \"last\", [\"fn\", [\"a\"], [\"nth\", \"a\", [\"-\", [\".-\", \"a\", [\"`\", \"length\"]], 1]]]], [\"def\", \"count\", [\"fn\", [\"a\"], [\".-\", \"a\", [\"`\", \"length\"]]]], [\"def\", \"empty?\", [\"fn\", [\"a\"], [\"if\", [\"list?\", \"a\"], [\"=\", 0, [\".-\", \"a\", [\"`\", \"length\"]]], [\"=\", \"a\", null]]]], [\"def\", \"slice\", [\"fn\", [\"a\", \"b\", \"&\", \"end\"], [\".\", \"a\", [\"`\", \"slice\"], \"b\", [\"if\", [\">\", [\".-\", \"end\", [\"`\", \"length\"]], 0], [\"get\", \"end\", 0], [\".-\", \"a\", [\"`\", \"length\"]]]]]], [\"def\", \"rest\", [\"fn\", [\"a\"], [\"slice\", \"a\", 1]]], [\"def\", \"apply\", [\"fn\", [\"f\", \"&\", \"b\"], [\".\", \"f\", [\"`\", \"apply\"], \"f\", [\"concat\", [\"slice\", \"b\", 0, -1], [\"last\", \"b\"]]]]], [\"def\", \"and\", [\"~\", [\"fn\", [\"&\", \"xs\"], [\"if\", [\"empty?\", \"xs\"], true, [\"if\", [\"=\", 1, [\".-\", \"xs\", [\"`\", \"length\"]]], [\"first\", \"xs\"], [\"list\", [\"`\", \"let\"], [\"list\", [\"`\", \"__and\"], [\"first\", \"xs\"]], [\"list\", [\"`\", \"if\"], [\"`\", \"__and\"], [\"concat\", [\"`\", [\"and\"]], [\"rest\", \"xs\"]], [\"`\", \"__and\"]]]]]]]], [\"def\", \"or\", [\"~\", [\"fn\", [\"&\", \"xs\"], [\"if\", [\"empty?\", \"xs\"], null, [\"if\", [\"=\", 1, [\".-\", \"xs\", [\"`\", \"length\"]]], [\"first\", \"xs\"], [\"list\", [\"`\", \"let\"], [\"list\", [\"`\", \"__or\"], [\"first\", \"xs\"]], [\"list\", [\"`\", \"if\"], [\"`\", \"__or\"], [\"`\", \"__or\"], [\"concat\", [\"`\", [\"or\"]], [\"rest\", \"xs\"]]]]]]]]], null];\nEVAL(minimal, STDLIB);\n\nfunction macroexpand(ast, ctx) {\n  var resolveString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  while (true) {\n    if (!isArray(ast)) break;\n    if (typeof ast[0] !== \"string\") break;\n    var v = $var$(ctx, ast[0]);\n    if (!isFunction(v)) break;\n    if (!isArray(v.ast)) break;\n    if (!v.ast[3]) break; // Это макрос! 3-й элемент макроса установлен в 1 через push\n\n    ast = v.apply(v, ast.slice(1));\n  }\n\n  return ast;\n}\n\nfunction env_bind(ast, ctx, exprs) {\n  // Return new ctx with symbols in ast bound to\n  // corresponding values in exprs\n  var newCtx = {};\n\n  for (var i = 0; i < ast.length; i++) {\n    if (ast[i] === \"&\") {\n      // variable length arguments\n      newCtx[ast[i + 1]] = Array.prototype.slice.call(exprs, i);\n      break;\n    } else {\n      newCtx[ast[i]] = exprs[i];\n    }\n  }\n\n  return [newCtx, ctx];\n}\n\nfunction eval_ast(ast, ctx) {\n  var resolveString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  if (isArray(ast)) {\n    // list?\n    return ast.map(function (e) {\n      return EVAL(e, ctx, resolveString);\n    });\n  }\n\n  if (isString(ast)) {\n    var value = $var$(ctx, ast);\n\n    if (value !== undefined) {\n      // variable\n      return value;\n    }\n\n    return resolveString ? ast : undefined; // if string and not in ctx:\n  }\n\n  return ast;\n}\n\nfunction EVAL(ast, ctx) {\n  var resolveString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  while (true) {\n    if (!isArray(ast)) {\n      return eval_ast(ast, ctx, resolveString);\n    } // apply\n\n\n    ast = macroexpand(ast, ctx);\n    if (!Array.isArray(ast)) return ast; // do we need eval here?\n\n    if (ast.length === 0) return null; // [] => empty list (or, maybe return vector [])\n\n    var op = ast[0];\n\n    if (isString(op) && op in SPECIAL_FORMS) {\n      return SPECIAL_FORMS[op](ast.slice(1), ctx, resolveString);\n    }\n\n    var el = ast.map(function (ast) {\n      return EVAL(ast, ctx, resolveString);\n    });\n    var f = el[0];\n\n    if (f.ast) {\n      ast = f.ast[0];\n      ctx = env_bind(f.ast[2], f.ast[1], el.slice(1)); // TCO\n    } else {\n      return f.apply(f, el.slice(1));\n    }\n  }\n} // EVAL\n\n\nfunction eval_context(ast, ctx) {\n  var result = EVAL(ast, [ctx || {}, STDLIB]);\n  return result;\n} // Use with care\n\n\nfunction init_lisp(ctx) {\n  ctx = [ctx || {}, STDLIB];\n  return {\n    eval: function _eval(ast) {\n      return eval_context(ast, ctx);\n    },\n    val: function val(varName, value) {\n      return $var$(varName, value);\n    }\n  };\n}\nfunction eval_lisp(ast, ctx) {\n  var result = eval_context(ast, ctx);\n\n  if (typeof result == \"function\") {\n    return '[\"function\"]';\n  } else {\n    return result;\n  }\n}\nfunction evaluate(ast, ctx) {\n  return eval_lisp(ast, ctx);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"b\"] = LPESyntaxError;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = parse;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__console_console__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lpel__ = __webpack_require__(6);\n/**\n * LuxPath expressions parser\n *\n * VERSION: 1.0.1\n * \n * DVD: added sexpr property to the token as array to keep s-expressions.\n *      arity and first, second etc will be removed\n * \n */\n// Parser for Simplified JavaScript written in Simplified JavaScript\n// From Top Down Operator Precedence\n// http://javascript.crockford.com/tdop/index.html\n// Douglas Crockford\n// 2010-06-26\n//////////////////////////////////////////////////\n// Later hacked to parse LPE instead of JavaScript\n// Dmitry Dorofeev\n// 2017-01-20\n\n\n\nvar make_parse = function make_parse() {\n  var symbol_table = {};\n  var token;\n  var tokens;\n  var token_nr; // стэк для типов выражений\n\n  var expr_scope = {\n    pop: function pop() {}\n  }; // для разбора логических выражений типа (A and B or C)\n  // для хранения алиасов для операций\n\n  var operator_aliases = {};\n\n  var operator_alias = function operator_alias(from, to) {\n    operator_aliases[from] = to;\n  };\n\n  var itself = function itself() {\n    return this;\n  };\n\n  var scope = {\n    find: function find(n) {\n      var e = this,\n          o;\n      var s = Object.create(original_symbol);\n      s.nud = itself;\n      s.led = null;\n      s.lbp = 0;\n      return s;\n    }\n  };\n  var expr_logical_scope = {\n    pop: function pop() {\n      expr_scope = this.parent;\n    },\n    parent: null,\n    tp: \"logical\"\n  };\n  var expr_lpe_scope = {\n    pop: function pop() {\n      expr_scope = this.parent;\n    },\n    parent: null,\n    tp: \"lpe\"\n  };\n\n  var new_expression_scope = function new_expression_scope(tp) {\n    var s = expr_scope;\n    expr_scope = Object.create(tp == \"logical\" ? expr_logical_scope : expr_lpe_scope);\n    expr_scope.parent = s;\n    return expr_scope;\n  };\n\n  var advance = function advance(id) {\n    var a, o, t, v;\n\n    if (id && token.id !== id) {\n      makeError(token, \"Got \" + token.value + \" but expected '\" + id + \"'.\");\n    }\n\n    if (token_nr >= tokens.length) {\n      token = symbol_table[\"(end)\"];\n      return;\n    }\n\n    t = tokens[token_nr];\n    token_nr += 1;\n    v = t.value;\n    a = t.type;\n\n    if (a === \"name\") {\n      if (expr_scope.tp == \"logical\") {\n        if (v === \"or\" || v === \"and\" || v === \"not\" || v === \"in\" || v === \"is\") {\n          a = \"operator\";\n          o = symbol_table[v];\n\n          if (!o) {\n            makeError(t, \"Unknown logical operator.\");\n          }\n        } else {\n          o = scope.find(v);\n        }\n      } else {\n        o = scope.find(v);\n      }\n    } else if (a === \"operator\") {\n      o = symbol_table[v];\n\n      if (!o) {\n        makeError(t, \"Unknown operator.\");\n      }\n    } else if (a === \"string_double\") {\n      o = symbol_table[\"(string_literal_double)\"];\n      a = \"literal\";\n    } else if (a === \"string_single\") {\n      o = symbol_table[\"(string_literal_single)\"];\n      a = \"literal\";\n    } else if (a === \"number\") {\n      o = symbol_table[\"(number_literal)\"];\n      a = \"literal\";\n    } else {\n      makeError(t, \"Unexpected token.\");\n    }\n\n    token = Object.create(o);\n    token.from = t.from;\n    token.to = t.to;\n    token.value = v;\n    token.arity = a;\n\n    if (a == \"operator\") {\n      token.sexpr = operator_aliases[v];\n    } else {\n      token.sexpr = v; // by dima\n    }\n\n    return token;\n  };\n\n  var statement = function statement() {\n    var n = token,\n        v;\n\n    if (n.std) {\n      advance(); //scope.reserve(n);\n\n      return n.std();\n    }\n\n    v = expression(0); //if (!v.assignment && v.id !== \"(\") {\n\n    /*  if (v.id !== \"(\" && v.id !== \"name\" && v.id !== \"number\") {\n        console.log(v);\n        v.error(\"Bad expression statement.\");\n    }*/\n    //advance(\";\");\n\n    return v;\n  };\n\n  var statements = function statements() {\n    var a = [],\n        s;\n\n    while (true) {\n      //console.log(token);\n      if (token.id === \"(end)\") {\n        break;\n      } else if (token.value === ';') {\n        // skip optional ;\n        advance();\n      }\n\n      s = statement(); //console.log(\"STATEMENT \", s);\n\n      if (s) {\n        a.push(s);\n      }\n    }\n\n    return a.length === 0 ? null : a.length === 1 ? a[0] : {\n      \"sexpr\": [\"do\"].concat(a.map(function (el) {\n        return el[\"sexpr\"];\n      }))\n    };\n  };\n\n  var expression = function expression(rbp) {\n    var left;\n    var t = token;\n    advance();\n    left = t.nud();\n\n    while (rbp < token.lbp) {\n      t = token;\n      advance();\n      left = t.led(left);\n    }\n\n    return left;\n  };\n\n  var original_symbol = {\n    nud: function nud() {\n      makeError(this, \"Undefined.\");\n    },\n    led: function led(left) {\n      makeError(this, \"Missing operator.\");\n    }\n  };\n\n  var symbol = function symbol(id, bp) {\n    var s = symbol_table[id];\n    bp = bp || 0;\n\n    if (s) {\n      if (bp >= s.lbp) {\n        s.lbp = bp;\n      }\n    } else {\n      s = Object.create(original_symbol);\n      s.id = s.value = id;\n      s.lbp = bp;\n      symbol_table[id] = s;\n    }\n\n    operator_alias(id, id);\n    return s;\n  };\n\n  var infix = function infix(id, bp, led) {\n    var s = symbol(id, bp);\n\n    s.led = led || function (left) {\n      this.first = left;\n      var right = expression(bp);\n      this.second = right;\n      this.arity = \"binary\";\n      this.sexpr = [this.sexpr, left.sexpr, right.sexpr];\n      return this;\n    };\n\n    return s;\n  };\n\n  var infixr = function infixr(id, bp, led) {\n    var s = symbol(id, bp);\n\n    s.led = led || function (left) {\n      this.first = left;\n      var right = expression(bp - 1);\n      this.second = right;\n      this.arity = \"binary\";\n      this.sexpr = [this.sexpr, left.sexpr, right.sexpr];\n      return this;\n    };\n\n    return s;\n  };\n\n  var prefix = function prefix(id, nud) {\n    var s = symbol(id);\n\n    s.nud = nud || function () {\n      // scope.reserve(this);\n      var expr = expression(70);\n      this.first = expr;\n      this.arity = \"unary\";\n      this.sexpr = [this.sexpr, expr.sexpr];\n      return this;\n    };\n\n    return s;\n  };\n\n  symbol(\"(end)\");\n  symbol(\"(name)\");\n  symbol(\"(null)\");\n  symbol(\":\");\n  symbol(\";\");\n  symbol(\")\");\n  symbol(\"]\");\n  symbol(\"}\"); // allow to skip values in function calls....\n\n  var comma = symbol(\",\");\n\n  symbol(\"(string_literal_double)\").nud = function () {\n    this.first = '\"';\n    this.arity = \"unary\";\n    this.sexpr = ['\"', this.sexpr];\n    return this;\n  };\n\n  symbol(\"(string_literal_single)\").nud = function () {\n    this.first = \"'\";\n    this.arity = \"unary\";\n    this.sexpr = [\"'\", this.sexpr];\n    return this;\n  };\n\n  symbol(\"(number_literal)\").nud = itself;\n  infix(\"?\", 20, function (left) {\n    // FIXME TODO - need sexpr !!!\n    this.first = left;\n    this.second = expression(0);\n    advance(\":\");\n    this.third = expression(0);\n    this.arity = \"ternary\";\n    return this;\n  });\n  infixr(\"&&\", 30);\n  infixr(\"∧\", 30);\n  operator_alias(\"&&\", \"and\");\n  operator_alias(\"∧\", \"and\");\n  infixr(\"||\", 30);\n  infixr(\"∨\", 30);\n  operator_alias(\"||\", \"or\");\n  operator_alias(\"∨\", \"or\");\n  /* will be used in logical scope */\n\n  infixr(\"and\", 30);\n  infixr(\"or\", 30); // required for SQL logical scope where a in (1,2,3)\n\n  infixr(\"in\", 30);\n  infixr(\"is\", 30);\n  prefix(\"not\"); // for SQL types: '10'::BIGINT\n\n  infixr(\"::\", 90); // for SQL as\n\n  infixr(\":\", 80);\n  infixr('~', 40);\n  infixr('!~', 40);\n  infixr('=', 40);\n  infixr('≠', 40);\n  operator_alias('≠', '!='); // from to canonical form;\n\n  infixr('==', 40);\n  infixr('!==', 40);\n  infixr('!=', 40);\n  infixr('<', 40);\n  infixr('<=', 40);\n  infixr('≤', 40);\n  operator_alias('≤', '<=');\n  infixr(\">\", 40);\n  infixr(\">=\", 40);\n  infixr(\"≥\", 40);\n  operator_alias(\"≥\", \">=\");\n  infixr(\"<>\", 40);\n  infix(\"+\", 50);\n  infix(\"-\", 50);\n  infix(\"*\", 60);\n  infix(\"/\", 60);\n  infix(\"(\", 80, function (left) {\n    var a = [];\n\n    if (left.id === \"[\") {\n      // FIXME TODO\n      this.arity = \"ternary\";\n      this.first = left.first;\n      this.second = left.second;\n      this.third = a;\n    } else {\n      this.arity = \"binary\";\n      this.first = left;\n      this.value = \"(\"; // it was '(' by dima\n\n      this.second = a;\n\n      if ((left.arity !== \"unary\" || left.id !== \"function\") && left.arity !== \"name\" && left.id !== \"(\" && left.id !== \"&&\" && left.id !== \"||\" && left.id !== \"?\") {\n        makeError(left, \"Expected a variable name.\");\n      }\n    } // dima support for missed function arguments...\n\n\n    if (token.id !== \")\") {\n      if (false) {\n        // специальный парсер для where - logical expression.\n        // тут у нас выражение с использованием скобок, and, or, not и никаких запятых...\n        new_expression_scope(\"logical\");\n        var e = expression(0);\n        expr_scope.pop();\n        a.push(e);\n      } else {\n        new_expression_scope(\"lpe\");\n\n        while (true) {\n          // console.log(\">\" + token.arity + \" NAME:\" + left.value);\n          if (token.id === ',') {\n            a.push({\n              value: null,\n              arity: \"literal\"\n            });\n            advance();\n          } else if (token.id === ')') {\n            a.push({\n              value: null,\n              arity: \"literal\"\n            });\n            break;\n          } else {\n            new_expression_scope(\"logical\");\n            var e = expression(0);\n            expr_scope.pop(); // var e = statements();\n\n            a.push(e);\n\n            if (token.id !== \",\") {\n              break;\n            }\n\n            advance(\",\");\n          }\n        }\n\n        expr_scope.pop();\n      }\n    }\n\n    this.sexpr = [this.first.value].concat(a.map(function (el) {\n      return el.sexpr;\n    }));\n    advance(\")\");\n    return this;\n  });\n\n  function lift_funseq(node) {\n    if (node.value === \"->\") {\n      return lift_funseq(node.first).concat(lift_funseq(node.second));\n    } else if (node.value === \"()\") {\n      if (node.first.value === \"->\") {\n        // если у нас в скобки взято выражение \"->\", то скобки можно удалить\n        // if (true).(frst().second()) === if(true) => [->> [first] [second]] скобки не нужны, \n        // так как seq уже группирует вызовы в цепочку\n        return [[\"->\"].concat(lift_funseq(node.first.first)).concat(lift_funseq(node.first.second))];\n      } else {\n        return lift_funseq(node.first);\n      }\n    } else {\n      return [node.sexpr];\n    }\n  }\n\n  function lift_funseq_2(node) {\n    if (node.value === \"->>\") {\n      return lift_funseq(node.first).concat(lift_funseq(node.second));\n    } else if (node.value === \"()\") {\n      if (node.first.value === \"->>\") {\n        // если у нас в скобки взято выражение \"->\", то скобки можно удалить\n        // if (true).(frst().second()) === if(true) => [->> [first] [second]] скобки не нужны, \n        // так как seq уже группирует вызовы в цепочку\n        return [[\"->>\"].concat(lift_funseq(node.first.first)).concat(lift_funseq(node.first.second))];\n      } else {\n        return lift_funseq(node.first);\n      }\n    } else {\n      return [node.sexpr];\n    }\n  }\n\n  infix(\".\", 70, function (left) {\n    this.first = left; // this.second = expression(0);\n\n    this.second = expression(70);\n    this.arity = \"binary\";\n    this.value = \"->\";\n    this.sexpr = [\"->\"].concat(lift_funseq(this));\n    return this;\n  });\n  infix(\"..\", 70, function (left) {\n    this.first = left; // this.second = expression(0);\n\n    this.second = expression(70);\n    this.arity = \"binary\";\n    this.value = \"->>\";\n    this.sexpr = [\"->>\"].concat(lift_funseq_2(this));\n    return this;\n  }); // WARNING HACK FIXME DIMA - добавил чтобы писать order_by(+a)\n  // А также замена /table на +table в htSQL\n\n  prefix(\"+\");\n  prefix(\"!\");\n  prefix(\"not\"); // will be used in logical scope\n\n  prefix(\"¬\");\n  operator_alias(\"!\", \"not\");\n  operator_alias(\"¬\", \"not\"); // trying to optimize, when we have negated -number\n\n  prefix(\"-\");\n  prefix(\".\", function () {\n    var v = expression(70);\n\n    if (v.value !== \"(\") {\n      makeError(v, \"Only functions may have dot (.) unary operator.\");\n    } // this.first = v;\n    // this.arity = \"unary\";\n    // return this;\n    // skip unary dot !!!\n\n\n    return v;\n  });\n  prefix(\"(\", function () {\n    var e = expression(0);\n\n    if (expr_scope.tp == \"logical\") {\n      // we should remember all brackets to restore original user expression\n      e.sexpr = [\"()\", e.sexpr];\n    } else {\n      if (e.value === \"->\") {\n        // в скобки взято выражение из цепочки LPE вызовов, нужно запомнить скобки, делаем push \"()\" в текущий AST \n        e = {\n          first: e,\n          value: \"()\",\n          arity: \"unary\",\n          sexpr: [\"()\", e.sexpr]\n        };\n      }\n    }\n\n    advance(\")\");\n    return e;\n  });\n  prefix(\"[\", function () {\n    var a = [];\n\n    if (token.id !== \"]\") {\n      while (true) {\n        a.push(expression(0)); // a.push(statements());\n\n        if (token.id !== \",\") {\n          break;\n        }\n\n        advance(\",\");\n      }\n    }\n\n    advance(\"]\");\n    this.first = a;\n    this.arity = \"unary\";\n    this.sexpr = [\"[\"].concat(a.map(function (el) {\n      return el.sexpr;\n    }));\n    return this;\n  });\n  return function (source) {\n    tokens = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lpel__[\"a\" /* default */])(source, '=<>!+-*&|/%^:.', '=<>&|:.');\n    token_nr = 0;\n    advance();\n    var s = statements(); // var s = expression(0);\n\n    advance(\"(end)\");\n    return s;\n  };\n}; // Transform a token object into an exception object and throw it.\n\n\nfunction LPESyntaxError(message) {\n  this.constructor.prototype.__proto__ = Error.prototype;\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message; // this.stack = (new Error()).stack;\n}\n\nfunction makeError(t, message) {\n  t.message = message;\n  var errorDescription = JSON.stringify(t, ['name', 'message', 'from', 'to', 'key', 'value', 'arity', 'first', 'second', 'third', 'fourth'], 4);\n  throw new LPESyntaxError(errorDescription);\n}\n\nvar parser = make_parse(); // console.log('LPE Parser initialized')\n\nfunction parse(str) {\n  try {\n    var parseResult = parser(str); // from, to, value, arity, sexpr\n\n    return parseResult.sexpr;\n  } catch (err) {\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].error(\"Error\", err.message);\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].error(\"Error\", err.stack);\n    throw err;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"b\"] = sql_where_context;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = eval_sql_where;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__console_console__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lpep__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_utils__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lisp__ = __webpack_require__(1);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n Copyright (c) 2019 Luxms Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining\n a copy of this software and associated documentation files (the \"Software\"),\n to deal in the Software without restriction, including without limitation\n the rights to use, copy, modify, merge, publish, distribute, sublicense,\n and/or sell copies of the Software, and to permit persons to whom the Software\n is furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n\n\n/*\nwhere - всегда возвращает слово WHERE, а потом условия. На пустом вхоже вернёт WHERE TRUE\nfilter - на пустом входе вернёт пустую строку\n*/\n\nfunction sql_where_context(_vars) {\n  var _context = _vars;\n\n  var try_to_quote_column = function try_to_quote_column(colname) {\n    if (_typeof(_vars['_columns']) == 'object') {\n      var h = _vars['_columns'][colname];\n\n      if (_typeof(h) == \"object\") {\n        h = h['name'].toString(); // console.log(\"-: try_to_quote_column \" + JSON.stringify(h));\n        // console.log(\"-: try_to_quote_column \" + (typeof h));\n\n        if (h.length > 0) {\n          // return '\"' + h + '\"';\n          return h;\n        }\n      }\n    }\n\n    return colname.toString();\n  };\n\n  var try_to_quote_order_by_column = function try_to_quote_order_by_column(colname) {\n    if (_typeof(_vars['_columns']) == 'object') {\n      var h = _vars['_columns'][colname];\n\n      if (_typeof(h) == \"object\") {\n        var o = h['order'];\n\n        if (o === undefined) {\n          o = h['name'];\n        }\n\n        __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"-: try_to_quote_order_by_column \" + JSON.stringify(o));\n        __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"-: try_to_quote_order_by_column \" + _typeof(o));\n\n        if (o !== undefined && o.length > 0) {\n          //return '\"' + o.toString() + '\"';\n          return o.toString();\n        }\n      }\n    }\n\n    return colname.toString();\n  };\n\n  var resolve_literal = function resolve_literal(lit) {\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('LITERAL ', lit, '  CONTEXT:', _vars[lit]);\n\n    if (_vars[lit] == undefined) {\n      return try_to_quote_column(lit);\n    } else {\n      // есть возможность переименовать имена столбцов! или сделать ещё какие-то подстановки\n      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lisp__[\"a\" /* eval_lisp */])(lit, _vars);\n    }\n  };\n\n  var resolve_order_by_literal = function resolve_order_by_literal(lit) {\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('OB LITERAL ', lit, ' CONTEXT:', _vars[lit]);\n\n    if (_vars[lit] === undefined) {\n      return try_to_quote_order_by_column(lit);\n    } else {\n      // есть возможность переименовать имена столбцов! или сделать ещё какие-то подстановки\n      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lisp__[\"a\" /* eval_lisp */])(lit, _vars);\n    }\n  };\n  /* заполняем контекст функциями и макросами, заточенными на SQL */\n\n\n  _context['order_by'] = function () {\n    var ret = [];\n    var ctx = {};\n\n    for (var key in _vars) {\n      ctx[key] = _vars[key];\n    } // так как order_by будет выполнять eval_lisp, когда встретит имя стольба с минусом -a, то мы\n    // с помощью макросов + и - в этом случае перехватим вызов и сделаем обработку.\n    // а вот когда работает обработчик аргументов where - там eval_lisp почти никогда не вызывается...\n\n\n    ctx['+'] = function (a) {\n      if (a instanceof Array) {\n        throw \"recursive +..-\";\n      } else {\n        return resolve_order_by_literal(a);\n      }\n    };\n\n    ctx['+'].ast = [[], {}, [], 1]; // mark as macro\n\n    ctx['-'] = function (a) {\n      //console.log(\"-: call \" + JSON.stringify(a));\n      if (a instanceof Array) {\n        throw \"recursive -..+\";\n      } else {\n        return resolve_order_by_literal(a) + ' ' + 'DESC';\n      }\n    };\n\n    ctx['-'].ast = [[], {}, [], 1]; // mark as macro\n\n    for (var i = 0; i < arguments.length; i++) {\n      if (arguments[i] instanceof Array) {\n        ret.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lisp__[\"a\" /* eval_lisp */])(arguments[i], ctx));\n      } else {\n        // try_to_quote_column берёт текст в двойные кавычки для известных столбцов!!!\n        ret.push(resolve_order_by_literal(arguments[i].toString()));\n      }\n    }\n\n    if (ret.length > 0) {\n      return 'ORDER BY ' + ret.join(',');\n    } else {\n      return '';\n    }\n  };\n\n  _context['order_by'].ast = [[], {}, [], 1]; // mark as macro\n\n  _context['pg_interval'] = function (cnt, period_type) {\n    var pt;\n\n    if (period_type instanceof Object) {\n      pt = period_type[\"unit\"];\n    } else {\n      pt = period_type;\n    }\n\n    if (/^\\d+$/.test(pt)) {\n      // all numbers....\n      switch (pt) {\n        case 1:\n          pt = 'second';\n          break;\n\n        case 2:\n          pt = 'minute';\n          break;\n\n        case 3:\n          pt = 'hour';\n          break;\n\n        case 4:\n          pt = 'day';\n          break;\n\n        case 5:\n          pt = 'week';\n          break;\n\n        case 6:\n          pt = 'month';\n          break;\n\n        case 7:\n          pt = 'quarter';\n          break;\n\n        case 8:\n          pt = 'year';\n          break;\n\n        default:\n          throw \"wrong period type:\" + pt;\n      }\n    } else {\n      var reg = new RegExp(\"['\\\"]+\", \"g\");\n      pt = pt.replace(reg, \"\");\n    }\n\n    var regExp = new RegExp(/quarter/, \"i\");\n\n    if (regExp.test(pt)) {\n      return \"'\" + cnt * 3 + \" month'::interval\";\n    }\n\n    return \"'\" + cnt + \" \" + pt + \"'::interval\";\n  }; // filter\n\n\n  _context['filter'] = function () {\n    var ctx = {};\n\n    for (var key in _vars) {\n      ctx[key] = _vars[key];\n    }\n\n    var prnt = function prnt(ar) {\n      if (ar instanceof Array) {\n        if (ar[0] === '$' || ar[0] === '\"' || ar[0] === \"'\" || ar[0] === \"[\" || ar[0] === 'parse_kv' || ar[0] === \"=\" || ar[0] === \"pg_interval\") {\n          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lisp__[\"a\" /* eval_lisp */])(ar, ctx);\n        } else {\n          if (ar.length == 2) {\n            // unary\n            if (ar[0] == \"not\") {\n              return ar[0] + ' ' + prnt(ar[1]);\n            } else if (ar[0] == \"()\") {\n              return \"(\" + prnt(ar[1]) + \")\";\n            } else if (ar[0].match(/^[^\\w]+$/)) {\n              return ar[0] + prnt(ar[1]);\n            } else {\n              return prnt(ar[0]) + \"(\" + prnt(ar[1]) + \")\";\n            }\n          } else if (ar.length == 3) {\n            if (ar[0] == \"->\") {\n              // наш LPE использует точку, как разделитель вызовов функций и кодирует её как ->\n              // в логических выражениях мы это воспринимаем как ссылку на <ИМЯ СХЕМЫ>.<ИМЯ ТАБЛИЦЫ>\n              //return '\"' + ar[1]+ '\".\"' + ar[2] + '\"';\n              return ar[1] + '.' + ar[2];\n            } else if (ar[0] == \"and\" || ar[0] == \"or\" || ar[0] == \"ilike\" || ar[0] == \"like\" || ar[0] == \"in\" || ar[0] == \"is\" || ar[0].match(/^[^\\w]+$/)) {\n              // имя функции не начинается с буквы\n              return prnt(ar[1]) + ' ' + ar[0] + ' ' + prnt(ar[2]);\n            } else {\n              return ar[0] + '(' + prnt(ar[1]) + ',' + prnt(ar[2]) + ')';\n            }\n          } else {\n            // это неизвестная функция с неизвестным кол-вом аргументов\n            return ar[0] + '(' + ar.slice(1).map(function (argel) {\n              return prnt(argel);\n            }).join(',') + ')';\n          }\n        }\n      } else {\n        return ar;\n      }\n    };\n\n    ctx['\"'] = function (el) {\n      return '\"' + el.toString() + '\"';\n    };\n\n    ctx[\"'\"] = function (el) {\n      return \"'\" + el.toString() + \"'\";\n    };\n\n    ctx[\"[\"] = function (el) {\n      return \"[\" + Array.prototype.slice.call(arguments).join(',') + \"]\";\n    };\n\n    ctx['='] = function (l, r) {\n      if (r instanceof Array && r[0] == 'vector') {\n        return prnt(l) + \" in (\" + r.slice(1).map(function (el) {\n          return prnt(el);\n        }).join(',') + \")\";\n      }\n\n      return prnt(l) + \" = \" + prnt(r);\n    };\n\n    ctx['='].ast = [[], {}, [], 1]; // mark as macro\n    // $(name) will quote text elements !!! suitable for generating things like WHERE title in ('a','b','c')\n    // also, we should evaluate expression, if any.\n\n    ctx['$'] = function (inexpr) {\n      var expr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lisp__[\"a\" /* eval_lisp */])(inexpr, _context); // evaluate in a normal LISP context without vars, not in WHERE context\n\n      if (expr instanceof Array) {\n        // try to print using quotes, use plv8 !!!\n        return expr.map(function (el) {\n          if (typeof el === \"string\") {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_utils__[\"a\" /* db_quote_literal */])(el);\n          } else if (typeof el === \"number\") {\n            return el;\n          } else {\n            return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_utils__[\"a\" /* db_quote_literal */])(JSON.stringify(el));\n          }\n        }).join(',');\n      }\n\n      return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__utils_utils__[\"a\" /* db_quote_literal */])(expr);\n    };\n\n    ctx['$'].ast = [[], {}, [], 1]; // mark as macro\n    //  пока что считаем что у нас ОДИН аргумент и мы его интерпретируем как таблица.столбец\n\n    ctx['parse_kv'] = function (expr) {\n      if (expr instanceof Array) {\n        if (expr[0] === '->') {\n          var sql = 'select \"' + expr[2] + '\" from \"' + expr[1] + '\" where id = $1::INT';\n          var id_val = resolve_literal(expr[1].replace(/.$/, \"_id\")); //console.log('SQL: ', sql, \" val:\", id_val);\n\n          var res_json = plv8.execute(sql, [id_val]); //var res_json = [{\"src_id\":\"$a:Вася:$b:Петя\"}];\n\n          var frst = res_json[0]; //console.log('SQL RES: ', frst);\n\n          if (frst !== undefined && frst[expr[2]] !== null && frst[expr[2]].length > 0) {\n            var axis_condition = function axis_condition(e) {\n              var result = e.split(':').map(function (e2) {\n                e2 = e2.replace(/\\'/g, \"''\"); //' be safe\n\n                return e2.indexOf('$') == 0 ? ' AND ' + e2.substr(1) + '=' : \"'\" + e2 + \"'\";\n              }).join('').substr(5);\n              return result;\n            };\n\n            var result = axis_condition(frst[expr[2]]);\n            if (result === undefined || result.length == 0) return '(/*kv not resolved*/ 0=1)';\n            return result;\n          }\n        }\n      }\n\n      return '(/*parse_kv EMPTY*/ 1=0)';\n    };\n\n    ctx['parse_kv'].ast = [[], {}, [], 1]; // mark as macro\n\n    var ret = []; //console.log(\"where IN: \", JSON.stringify(Array.prototype.slice.call(arguments)));\n\n    var fts = _vars['fts'];\n    var tree = arguments;\n\n    if (fts !== undefined && fts.length > 0) {\n      fts = fts.replace(/\\'/g, \"''\"); //' be safe\n      // Full Text Search based on column_list\n\n      if (_typeof(_vars['_columns']) == 'object') {\n        //console.log(\"FTS: \",  JSON.stringify(fts));\n        var ilike = Object.values(_vars['_columns']).map(function (col) {\n          col[\"search\"] !== undefined ? [\"ilike\", col[\"search\"], [\"str\", '%' + fts + '%']] : null;\n        }).reduce(function (ac, el) {\n          el == null ? ac : ['or', ac, el];\n        }); //console.log( \"FTS PARSED: \",  JSON.stringify(ilike));\n\n        if (ilike !== undefined && ilike.length > 0) {\n          // добавляем корень AND с нашим поиском\n          tree = [[\"and\", tree[0], ['()', ilike]]];\n        }\n      }\n    }\n\n    for (var i = 0; i < tree.length; i++) {\n      // console.log(\"array \", JSON.stringify(Array.prototype.slice.call(tree[i])));\n      ret.push(prnt(tree[i], ctx));\n    }\n\n    var r = ret[0]; // у нас только один результат должен быть !!!\n\n    if (r == undefined) {\n      r = '';\n    }\n\n    return r;\n  };\n\n  _context['filter'].ast = [[], {}, [], 1]; // mark as macro\n  // where - we should not eval arguments, so we must mark where as macro!!!\n\n  _context['where'] = function () {\n    // we should always get ONE argument, for example: [\"=\",[\"$\",[\"->\",\"period\",\"title\"]],3]\n    // BUT if we get two, or more arguments, we eval them one by one, AND combine later with AND operand, skipping empty results...\n    var tree = arguments;\n    var ret = [];\n\n    for (var i = 0; i < tree.length; i++) {\n      // console.log(\"array \", JSON.stringify(Array.prototype.slice.call(tree[i])));\n      var r = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lisp__[\"a\" /* eval_lisp */])([\"filter\", tree[i]], _context); // r should be string\n\n      if (r.length > 0) {\n        ret.push(r);\n      }\n    }\n\n    if (ret.length > 0) {\n      if (ret.length > 1) {\n        return 'WHERE (' + ret.join(') AND (') + ')';\n      } else {\n        return 'WHERE ' + ret[0];\n      }\n    } else {\n      return 'WHERE TRUE';\n    }\n  };\n\n  _context['where'].ast = [[], {}, [], 1]; // mark as macro\n\n  return _context;\n}\nfunction eval_sql_where(_expr, _vars) {\n  if (typeof _vars === 'string') _vars = JSON.parse(_vars);\n  var sexpr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lpep__[\"a\" /* parse */])(_expr);\n  __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('sql_where parse: ', JSON.stringify(sexpr));\n\n  if (sexpr instanceof Array && (sexpr[0] === 'filter' && sexpr.length <= 2 || sexpr[0] === 'order_by' || sexpr[0] === 'if' || sexpr[0] === 'where')) {// ok\n  } else {\n    throw \"only single where() or order_by() could be evaluated.\";\n  }\n\n  var _context = sql_where_context(_vars);\n\n  var ret = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lisp__[\"a\" /* eval_lisp */])(sexpr, _context); // console.log('ret: ',  JSON.stringify(ret));\n\n  return ret;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export sql_context */\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = parse_sql_expr;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = parse_sql_apidb_expr;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__console_console__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lisp__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__sql_where__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lpep__ = __webpack_require__(2);\n/**\n    Copyright (c) 2019 Luxms Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\n\n // polyfill = remove in 2020 !!!\n\nif (!Array.prototype.find) {\n  Array.prototype.find = function (predicate) {\n    if (this == null) {\n      throw new TypeError('Array.prototype.find called on null or undefined');\n    }\n\n    if (typeof predicate !== 'function') {\n      throw new TypeError('predicate must be a function');\n    }\n\n    var list = Object(this);\n    var length = list.length >>> 0;\n    var thisArg = arguments[1];\n    var value;\n\n    for (var i = 0; i < length; i++) {\n      value = list[i];\n\n      if (predicate.call(thisArg, value, i, list)) {\n        return value;\n      }\n    }\n\n    return undefined;\n  };\n}\n\nfunction sql_context(_vars) {\n  var _context = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__sql_where__[\"b\" /* sql_where_context */])(_vars);\n  /* заполняем контекст функциями и макросами, заточенными на SQL */\n\n\n  _context['sql'] = function () {\n    var q; // resulting sql\n\n    var args = Array.prototype.slice.call(arguments);\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('SQL IN: ', args);\n\n    var find_part = function find_part(p) {\n      return args.find(function (el) {\n        return p == el[0];\n      });\n    };\n\n    var sel = find_part('select');\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('FOUND select: ', sel);\n    q = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lisp__[\"a\" /* eval_lisp */])(sel, _context);\n    var from = find_part('from');\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('FOUND from: ', from);\n    q = q + ' ' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lisp__[\"a\" /* eval_lisp */])(from, _context);\n    var where = find_part('where');\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"FOUND where: \", where);\n\n    if (where instanceof Array && where.length > 1) {\n      q = q + ' ' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lisp__[\"a\" /* eval_lisp */])(where, _context);\n    }\n\n    var srt = find_part('sort');\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('FOUND sort: ', srt);\n\n    if (srt instanceof Array && srt.length > 1) {\n      q = q + ' ' + __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lisp__[\"a\" /* eval_lisp */])(srt, _context);\n    }\n\n    return q;\n  };\n\n  _context['sql'].ast = [[], {}, [], 1]; // mark as macro\n\n  function prnt(a) {\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('prnt IN: ', a);\n\n    if (a instanceof Array) {\n      if (a.length > 0) {\n        if (a[0] === '::' && a.length == 3) {\n          return a[1] + '::' + a[2];\n        } else if (a[0] === ':') {\n          return prnt(a[1]) + ' as \"' + a[2].replace(/\"/, '\\\\\"') + '\"';\n        } else {\n          return a[0] + '(' + a.slice(1).map(function (argel) {\n            return prnt(argel);\n          }).join(',') + ')';\n        }\n      } else {\n        return '';\n      }\n    } else {\n      return a;\n    }\n  } // должен вернуть СТРОКУ\n\n\n  _context['select'] = function () {\n    var a = Array.prototype.slice.call(arguments);\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"select IN: \", JSON.stringify(a));\n\n    if (a.length < 1) {\n      return \"SELECT *\";\n    } else {\n      return \"SELECT \" + a.map(prnt).join(',');\n    }\n  };\n\n  _context['select'].ast = [[], {}, [], 1]; // mark as macro\n\n  _context['from'] = function () {\n    var a = Array.prototype.slice.call(arguments);\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('from IN: ', a);\n\n    if (a.length < 1) {\n      return \"\";\n    } else {\n      return \"FROM \" + a.map(prnt).join(',');\n    }\n  };\n\n  _context['from'].ast = [[], {}, [], 1]; // mark as macro\n\n  return _context;\n}\n/*\nЭто не дописано!!! Идея была сделать синтаксис, похожий на htSQL. типа +table(col1,col2).where(col1>3)\nно например, как указать схему? сейчас парсер фигню выдаёт, так как точка не всегда корректно отрабатывает +sch.table(col1,col2)\nТщательнее надо....\n\nselect lpe.parse_sql_expr($$metrics(id).where(id='abcd')$$);\n\n\nПримеры htSQL:\n/course.filter(credits<3).select(department_code, no, title)\n/course.sort(credits-).limit(10){department_code, no, credits}\n/course.limit(10).sort(credits-){department_code, no, credits}\n\nТо есть, у нас имя таблицы идёт первым в любом случае. В LuxPath предлагаю использовать\nкомюинацию htSQL select и список столбцов {} в одном макросе +имя_таблицы(...)\nмы будем использовать + вместо / Но слэш в htSQL не является частью синтаксиса, имя таблицы просто всегда идёт первым!!!\n\n*/\n\nfunction parse_sql_expr(_expr, _vars) {\n  var ctx = sql_context(_vars);\n  var _context = ctx; // for(var key in _vars) _context[key] = _vars[key];\n\n  _context['->'] = function () {\n    var ret = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      ret.push(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lisp__[\"a\" /* eval_lisp */])(arguments[i], _context));\n    }\n\n    return ret.join(',');\n  };\n\n  _context['->'].ast = [[], {}, [], 1]; // mark as macro\n\n  var sexpr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lpep__[\"a\" /* parse */])(_expr);\n  __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"IN: \", sexpr);\n  /*\n  if (ctx.hasOwnProperty('where')){\n    console.log('W O W');\n  }\n  */\n  // точка входа всегда должна быть ->, так как мы определили -> как макроc чтобы иметь возможность\n  // перекодировать имена таблиц в вызов .from()\n\n  if (sexpr[0] !== '->') {\n    sexpr = ['->', sexpr];\n  } // теперь нужно пройтись по списку вызовов и привести к нормальной форме.\n  // в нормальной форме всё выглядит вот так: (seq sql(select() from()) sql(...) sql(...) )\n  // [\"seq\",[\"metrics\",\"a\",\"d\",[\"max\",\"c\"]],[\"where\"]]\n  // [\"seq\",[\"+\",[\"metrics\",\"a\",\"d\",[\"max\",\"c\"]]],[\"where\"]]\n\n  /* на вход прилетает IN:\n    metrics(a,d,max(c)).where(a>1 and i < 4).periods.where(a>4)\n    [\"seq\",[\"metrics\",\"a\",\"d\",[\"max\",\"c\"]],[\"where\",[\"and\",[\">\",\"a\",\"1\"],[\"<\",\"i\",\"4\"]]],\"periods\",[\"where\",[\">\",\"a\",\"4\"]]]\n    [\"seq\",[\"sql\",[\"select\",\"a\",\"d\",[\"max\",\"c\"]],[\"from\",\"metrics\"],[\"filter\",[\"and\",[\">\",\"a\",\"1\"],[\"<\",\"i\",\"4\"]]]],[\"sql\",[\"select\"],[\"from\",\"periods\"],[\"filter\",[\">\",\"a\",\"4\"]]]]\n  */\n\n\n  var sql = ['sql'];\n\n  var do_select_from = function do_select_from(sel) {\n    if (!(sel instanceof Array)) {\n      sel = [sel];\n    }\n\n    var fr = sel[0];\n    var p = false;\n\n    if (fr != 'where' && fr != 'select' && fr != 'sort' && fr != 'filter' && fr != 'from') {\n      sel[0] = 'select';\n      p = true;\n    }\n\n    sql.push(sel);\n\n    if (p) {\n      sql.push([\"from\", fr]);\n    }\n\n    __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"parse do_select_from: \", sql);\n  };\n\n  for (var i = 1; i < sexpr.length; i++) {\n    var expr = sexpr[i];\n\n    if (expr instanceof Array) {\n      // expr: [\"metrics\",\"a\",\"d\",[\"max\",\"c\"]]\n      if (expr[0] === 'order_by') {\n        expr[0] = 'sort';\n      }\n\n      ;\n\n      if (expr[0] === 'where') {\n        expr[0] = 'where';\n      }\n\n      ;\n\n      if (expr[0] === '+') {\n        // expr: [\"+\",[\"metrics\",\"a\",\"d\",[\"max\",\"c\"]]]\n        do_select_from(expr[1]);\n      } else if (_context[expr[0].toString()] === undefined) {\n        // это имя таблицы... так как мы проверили на ключевые слова,\n        // распознаваемые нашим интерпретатором\n        // expr: [\"metrics\",\"a\",\"d\",[\"max\",\"c\"]]\n        do_select_from(expr);\n      } else {\n        sql.push(sexpr[i]);\n      }\n    } else if (_context[expr.toString()] === undefined) {\n      // это литерал = имя таблицы...\n      // expr: \"metrics\"\n      do_select_from(expr);\n    } else {\n      throw 'unexpected call: ' + JSON.stringify(expr);\n    }\n  }\n\n  __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('parse: ', sql);\n  var ret = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lisp__[\"a\" /* eval_lisp */])(sql, _context); // console.log(\"parse: \", ret);\n\n  return ret;\n}\nfunction parse_sql_apidb_expr(_expr, _vars, _forced_table, _forced_where) {\n  var ctx = sql_context(_vars);\n  var _context = ctx; // for(var key in _vars) _context[key] = _vars[key];\n\n  var sexpr = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__lpep__[\"a\" /* parse */])(_expr);\n  __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"DBAPI IN: \", sexpr);\n  /*\n  if (ctx.hasOwnProperty('where')){\n    console.log('W O W');\n  }\n  */\n  // теперь нужно пройтись по списку вызовов и привести к нормальной форме.\n  // в нормальной форме у нас должен быть один вызов sql() а внутри select().from().where()\n  // причём \n  // select(a,b) === select(a).select(b)\n  // order_by(a,b) === order_by(a).order_by(b)\n  // where(a>1).where(b<1) === where(a>1 and b<1)\n  // from(a).from(b).from(c) === from(c)\n  // в последнем случае берётся последний from, а все первые игнорятся !!!!\n\n  var sql = ['sql']; // wrapped by sql call...\n\n  var cache = {\n    \"where\": [],\n    \"select\": [],\n    \"order_by\": [],\n    \"from\": []\n  };\n\n  for (var i = 1; i < sexpr.length; i++) {\n    var expr = sexpr[i];\n\n    if (expr instanceof Array) {\n      var fr = expr[0];\n\n      if (fr != 'where' && fr != 'select' && fr != 'order_by' && fr != 'from' && fr != ':') {\n        throw 'unexpected func: ' + JSON.stringify(fr);\n      } // have no idea how to support aliases for selects...\n\n\n      if (fr === ':' && expr[1][0] === 'select') {\n        cache[\"select\"].push(expr[1]);\n      } else {\n        cache[fr].push(expr);\n      }\n    } else {\n      throw 'unexpected literal: ' + JSON.stringify(expr);\n    }\n  }\n\n  if (_forced_table !== undefined) {\n    cache[fr].push([\"from\", _forced_table]);\n  }\n\n  var args = cache[\"select\"].map(function (ar) {\n    return ar.slice(1);\n  });\n  var sel = [].concat.apply([\"select\"], args); //flat\n\n  sql.push(sel);\n  sql.push(cache[\"from\"].pop());\n  args = cache[\"where\"].map(function (ar) {\n    return ar.slice(1);\n  });\n  args = [].concat.apply([], args); //flat\n\n  var w = [\"()\", args[0]];\n\n  if (args.length > 1) {\n    for (var i = 1; i < args.length; i++) {\n      w = [\"and\", w, [\"()\", args[i]]];\n    }\n  }\n\n  sql.push([\"where\", w]);\n  __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log(\"WHERE\", JSON.stringify(w));\n  __WEBPACK_IMPORTED_MODULE_0__console_console__[\"a\" /* default */].log('DBAPI parse: ', sql);\n  var ret = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lisp__[\"a\" /* eval_lisp */])(sql, _context);\n  return ret;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eval_lpe\", function() { return eval_lpe; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__console_console__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lpep__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lisp__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__sql_where__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__sql_context__ = __webpack_require__(4);\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return __WEBPACK_IMPORTED_MODULE_1__lpep__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"LPESyntaxError\", function() { return __WEBPACK_IMPORTED_MODULE_1__lpep__[\"b\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"evaluate\", function() { return __WEBPACK_IMPORTED_MODULE_2__lisp__[\"b\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"eval_lisp\", function() { return __WEBPACK_IMPORTED_MODULE_2__lisp__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"eval_sql_where\", function() { return __WEBPACK_IMPORTED_MODULE_3__sql_where__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"parse_sql_expr\", function() { return __WEBPACK_IMPORTED_MODULE_4__sql_context__[\"a\"]; });\n/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, \"parse_sql_apidb_expr\", function() { return __WEBPACK_IMPORTED_MODULE_4__sql_context__[\"b\"]; });\n\n\n\n\n\n\nfunction eval_lpe(lpe, ctx) {\n  var ast = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__lpep__[\"a\" /* parse */])(lpe);\n  return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__lisp__[\"a\" /* eval_lisp */])(ast, ctx);\n}\n\n // test:\n// var ast = parse('2+2*2');\n// console.log(ast);\n// var res = evaluate(ast, []);\n// console.log(res);\n// test:\n// var result = eval_sql_where(\"where(id=[1,2,3,4] and metric.tree_level(id) = 3 and max(id)=now() and $metric_id = 3)\", {\"$metric_id\":\"COOL\",\"id\":\"ID\"});\n// console.log(result);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJldmFsX2xwZSIsImxwZSIsImN0eCIsImFzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLFNBQVNBLFFBQVQsQ0FBa0JDLEdBQWxCLEVBQXVCQyxHQUF2QixFQUE0QjtBQUMxQixNQUFNQyxHQUFHLEdBQUcsMkVBQUssQ0FBQ0YsR0FBRCxDQUFqQjtBQUNBLFNBQU8sK0VBQVMsQ0FBQ0UsR0FBRCxFQUFNRCxHQUFOLENBQWhCO0FBQ0Q7O0NBZ0JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25zb2xlIGZyb20gJy4vY29uc29sZS9jb25zb2xlJztcbmltcG9ydCB7cGFyc2UsIExQRVN5bnRheEVycm9yfSBmcm9tICcuL2xwZXAnO1xuaW1wb3J0IHtldmFsX2xpc3AsIGV2YWx1YXRlfSBmcm9tICcuL2xpc3AnO1xuaW1wb3J0IHtzcWxfd2hlcmVfY29udGV4dCwgZXZhbF9zcWxfd2hlcmV9IGZyb20gJy4vc3FsX3doZXJlJztcbmltcG9ydCB7c3FsX2NvbnRleHQsIHBhcnNlX3NxbF9leHByLCBwYXJzZV9zcWxfYXBpZGJfZXhwcn0gZnJvbSAnLi9zcWxfY29udGV4dCc7XG5cblxuZnVuY3Rpb24gZXZhbF9scGUobHBlLCBjdHgpIHtcbiAgY29uc3QgYXN0ID0gcGFyc2UobHBlKTtcbiAgcmV0dXJuIGV2YWxfbGlzcChhc3QsIGN0eCk7XG59XG5cblxuZXhwb3J0IHtcbiAgcGFyc2UsXG4gIExQRVN5bnRheEVycm9yLFxuICBldmFsdWF0ZSwgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVwcmVjYXRlZFxuICBldmFsX2xpc3AsXG4gIGV2YWxfbHBlLFxuICBldmFsX3NxbF93aGVyZSxcbiAgcGFyc2Vfc3FsX2V4cHIsXG4gIHBhcnNlX3NxbF9hcGlkYl9leHByLFxufTtcblxuXG5cbi8vIHRlc3Q6XG4vLyB2YXIgYXN0ID0gcGFyc2UoJzIrMioyJyk7XG4vLyBjb25zb2xlLmxvZyhhc3QpO1xuLy8gdmFyIHJlcyA9IGV2YWx1YXRlKGFzdCwgW10pO1xuLy8gY29uc29sZS5sb2cocmVzKTtcblxuLy8gdGVzdDpcbi8vIHZhciByZXN1bHQgPSBldmFsX3NxbF93aGVyZShcIndoZXJlKGlkPVsxLDIsMyw0XSBhbmQgbWV0cmljLnRyZWVfbGV2ZWwoaWQpID0gMyBhbmQgbWF4KGlkKT1ub3coKSBhbmQgJG1ldHJpY19pZCA9IDMpXCIsIHtcIiRtZXRyaWNfaWRcIjpcIkNPT0xcIixcImlkXCI6XCJJRFwifSk7XG4vLyBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = tokenize;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__console_console__ = __webpack_require__(0);\n// http://javascript.crockford.com/tdop/tdop.html\n// 2010-02-23\n// (c) 2006 Douglas Crockford\n// Produce an array of simple token objects from a string.\n// A simple token object contains these members:\n//      type: 'name', 'string', 'number', 'operator'\n//      value: string or number value of the token\n//      from: index of first character of the token\n//      to: index of the last character + 1\n// Comments of the // type are ignored.\n// Operators are by default single characters. Multicharacter\n// operators can be made by supplying a string of prefix and\n// suffix characters.\n// characters. For example,\n//      '<>+-&', '=>&:'\n// will match any of these:\n//      <=  >>  >>>  <>  >=  +: -: &: &&: &&\n\n\nvar isDigit = function isDigit(c) {\n  return c >= '0' && c <= '9';\n};\n\nfunction tokenize(s) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '<>+-&';\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '=>&:';\n  var c; // The current character.\n\n  var from; // The index of the start of the token.\n\n  var i = 0; // The index of the current character.\n\n  var length = s.length;\n  var n; // The number value.\n\n  var q; // The quote character.\n\n  var str; // The string value.\n\n  var result = []; // An array to hold the results.\n\n  var make = function make(type, value) {\n    return {\n      type: type,\n      value: value,\n      from: from,\n      to: i\n    };\n  }; // Make a token object.\n  // If the source string is empty, return nothing.\n\n\n  if (!s) {\n    return [];\n  } // Loop through this text, one character at a time.\n\n\n  c = s.charAt(i);\n\n  while (c) {\n    from = i; // Ignore whitespace.\n\n    if (c <= ' ') {\n      i += 1;\n      c = s.charAt(i); // name.\n    } else if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '$' || c === '#') {\n      str = c;\n      i += 1;\n\n      for (;;) {\n        c = s.charAt(i);\n\n        if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '_' || c === '$') {\n          str += c;\n          i += 1;\n        } else {\n          break;\n        }\n      }\n\n      result.push(make('name', str)); // number.\n      // A number cannot start with a decimal point. It must start with a digit,\n      // possibly '0'.\n    } else if (c >= '0' && c <= '9') {\n      str = c;\n      i += 1; // Look for more digits.\n\n      for (;;) {\n        c = s.charAt(i);\n\n        if (c < '0' || c > '9') {\n          break;\n        }\n\n        i += 1;\n        str += c;\n      } // Look for a decimal fraction part.\n\n\n      if (c === '.') {\n        i += 1;\n        str += c;\n\n        for (;;) {\n          c = s.charAt(i);\n\n          if (c < '0' || c > '9') {\n            break;\n          }\n\n          i += 1;\n          str += c;\n        }\n      } // Look for an exponent part.\n\n\n      if (c === 'e' || c === 'E') {\n        i += 1;\n        str += c;\n        c = s.charAt(i);\n\n        if (c === '-' || c === '+') {\n          i += 1;\n          str += c;\n          c = s.charAt(i);\n        }\n\n        if (c < '0' || c > '9') {\n          makeError(make('number', str), \"Bad exponent\");\n        }\n\n        do {\n          i += 1;\n          str += c;\n          c = s.charAt(i);\n        } while (c >= '0' && c <= '9');\n      } // Make sure the next character is not a letter.\n\n\n      if (c >= 'a' && c <= 'z') {\n        str += c;\n        i += 1;\n        makeError(make('number', str), \"Bad number\");\n      } // Don't convert the string value to a number. If it is finite, then it is a good\n      // token.\n      // result.push(make('number', parseFloat(str)));\n      // result.push(make('number', str));\n\n\n      n = +str;\n\n      if (isFinite(n)) {\n        result.push(make('number', n));\n      } else {\n        makeError(make('number', str), \"Bad number\");\n      } // string\n\n    } else if (c === '\\'' || c === '\"') {\n      str = '';\n      q = c;\n      i += 1;\n\n      for (;;) {\n        c = s.charAt(i);\n\n        if (c < ' ') {\n          // make('string', str).error(c === '\\n' || c === '\\r' || c === '' ?\n          //     \"Unterminated string.\" :\n          //     \"Control character in string.\", make('', str));\n          makeError(make('', str) || make(q === '\"' ? 'string_double' : 'string_single', str), c === '\\n' || c === '\\r' || c === '' ? \"Unterminated string.\" : \"Control character in string.\");\n        } // Look for the closing quote.\n\n\n        if (c === q) {\n          break;\n        } // Look for escapement.\n\n\n        if (c === '\\\\') {\n          i += 1;\n\n          if (i >= length) {\n            makeError(make(q === '\"' ? 'string_double' : 'string_single', str), \"Unterminated string\");\n          }\n\n          c = s.charAt(i);\n\n          switch (c) {\n            case 'b':\n              c = '\\b';\n              break;\n\n            case 'f':\n              c = '\\f';\n              break;\n\n            case 'n':\n              c = '\\n';\n              break;\n\n            case 'r':\n              c = '\\r';\n              break;\n\n            case 't':\n              c = '\\t';\n              break;\n\n            case 'u':\n              if (i >= length) {\n                makeError(make(q === '\"' ? 'string_double' : 'string_single', str), \"Unterminated string\");\n              }\n\n              c = parseInt(s.substr(i + 1, 4), 16);\n\n              if (!isFinite(c) || c < 0) {\n                makeError(make(q === '\"' ? 'string_double' : 'string_single', str), \"Unterminated string\");\n              }\n\n              c = String.fromCharCode(c);\n              i += 4;\n              break;\n          }\n        }\n\n        str += c;\n        i += 1;\n      }\n\n      i += 1;\n      result.push(make(q === '\"' ? 'string_double' : 'string_single', str));\n      c = s.charAt(i); // comment.\n    } else if (c === '/' && s.charAt(i + 1) === '/') {\n      i += 1;\n\n      for (;;) {\n        c = s.charAt(i);\n\n        if (c === '\\n' || c === '\\r' || c === '') {\n          break;\n        }\n\n        i += 1;\n      } // combining\n\n    } else if (prefix.indexOf(c) >= 0) {\n      str = c;\n      i += 1;\n\n      while (true) {\n        c = s.charAt(i);\n\n        if (i >= length || suffix.indexOf(c) < 0) {\n          break;\n        }\n\n        str += c;\n        i += 1;\n      }\n\n      result.push(make('operator', str)); // single-character operator\n    } else {\n      i += 1;\n      result.push(make('operator', c));\n      c = s.charAt(i);\n    }\n  }\n\n  return result;\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = db_quote_literal;\nfunction db_quote_literal(intxt) {\n  return \"'\" + intxt.toString().replace(/\\'/g, \"''\") + \"'\";\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdXRpbHMuanM/YTAwNSJdLCJuYW1lcyI6WyJkYl9xdW90ZV9saXRlcmFsIiwiaW50eHQiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7QUFDTyxTQUFTQSxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUM7QUFDbkMsU0FBTyxNQUFNQSxLQUFLLENBQUNDLFFBQU4sR0FBaUJDLE9BQWpCLENBQXlCLEtBQXpCLEVBQWlDLElBQWpDLENBQU4sR0FBK0MsR0FBdEQ7QUFDSiIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZnVuY3Rpb24gZGJfcXVvdGVfbGl0ZXJhbChpbnR4dCkge1xuICAgICByZXR1cm4gXCInXCIgKyBpbnR4dC50b1N0cmluZygpLnJlcGxhY2UoL1xcJy9nICwgXCInJ1wiKSArIFwiJ1wiO1xufSBcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy91dGlscy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ })
/******/ ]);
}); 